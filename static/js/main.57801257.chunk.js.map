{"version":3,"sources":["history.js","App.js","reportWebVitals.js","index.js"],"names":["History","props","state","historyLines","entry","this","setState","concat","map","b","i","generateRows","React","Component","App","buttons","answer","runningTotal","operation","memory","memRecall","historyString","history","createRef","currentOperation","percentFlag","historyAnswer","calculateRunningTotal","parseFloat","calculatedAnswer","current","addToHistory","percentageValue","percentage","applyOperation","percentageChange","percentageOf","applyPercentOperation","currentRunningTotal","newNumber","Error","operator","substring","length","value","percent","equals","clear","delete","clearEntry","memoryChange","memoryRecall","memoryClear","console","error","match","handleNumbers","handleOperators","elements","Array","from","count","cols","splice","Col","sm","className","Button","onClick","buttonClicked","push","Row","log","Container","Navbar","bg","variant","Brand","href","type","readOnly","renderButtons","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57801257.chunk.js","sourcesContent":["import React from 'react';\r\nimport './history.css';\r\n\r\nclass History extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      historyLines: []\r\n    }\r\n  }\r\n\r\n  addToHistory(entry) {\r\n    this.setState( (state) => ({\r\n      historyLines:  state.historyLines.concat([entry])\r\n    }))\r\n  }\r\n\r\n  generateRows() {\r\n    return this.state.historyLines.map((b,i) =>\r\n      <tr key={i}>\r\n        <td>{b}</td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2> History</h2>\r\n        <table>\r\n          <tbody>\r\n          {this.generateRows()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default History;\r\n","import React from 'react';\nimport History from './history';\nimport { Container, Row, Col, Navbar, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.buttons = [\n      \"MC\", \"M+\", \"M-\", \"MR\", \"CE\",\n      \"C\", \"/\", \"X\", \"Del\",\n      \"7\", \"8\", \"9\", \"-\",\n      \"4\", \"5\", \"6\", \"+\",\n      \"1\", \"2\", \"3\", \"=\",\n      \"%\", \"0\", \".\"\n    ]\n    this.state = {\n      answer: \"\",\n      runningTotal: 0,\n      operation: \"\",\n      memory: 0,\n      memRecall: false,\n      historyString: \"\"\n    }\n    this.history = React.createRef()\n  }\n\n  applyOperation(currentOperation, percentFlag = false) {\n\n    if (this.state.answer === \"\") {\n      this.setState({\n        operation: currentOperation\n      })\n    } else {\n      this.setState((state) => {\n        let historyAnswer;\n        if (percentFlag){\n        historyAnswer = state.historyString + \" \" + (state.answer * 100)\n        + \"%  of \"\n        } else {\n        historyAnswer = state.historyString + \" \" + state.answer + \" \"\n        + currentOperation}\n        return({\n        runningTotal: this.calculateRunningTotal(state.operation,\n          state.runningTotal, parseFloat(state.answer)),\n        operation: currentOperation,\n        answer: \"\",\n        historyString: historyAnswer\n      })\n    })\n  }}\n\n  equals() {\n    if (this.state.answer === \"\") {\n      this.setState((state) => ({\n        answer: state.runningTotal,\n        operation: \"=\"\n      }))\n    } else {\n      this.setState((state) => {\n        const calculatedAnswer = this.calculateRunningTotal(state.operation,\n          state.runningTotal, parseFloat(state.answer))\n        return ({\n          answer: calculatedAnswer,\n          runningTotal: 0,\n          operation: \"=\",\n          historyString: state.historyString + \" \" + state.answer + \" = \"\n            + calculatedAnswer\n        })\n      }\n        , () => {\n          this.history.current.addToHistory(this.state.historyString)\n          this.setState({ historyString: \"\" })\n        })\n    }\n  }\n\n  applyPercentOperation(operation, runningTotal, percentageValue) {\n    this.setState((state) => {\n      const calculatedAnswer = this.calculateRunningTotal(operation, runningTotal, percentageValue)\n      return ({\n        answer: calculatedAnswer,\n        operation: \"=\",\n        runningTotal: 0,\n        historyString: state.historyString + \" \" + state.answer + \"% = \" + calculatedAnswer\n      })\n    }, () => {\n      this.history.current.addToHistory(this.state.historyString)\n      this.setState({ historyString: \"\" })\n    }\n    )\n  }\n\n  percentageOf(percentage) {\n    this.setState({\n      runningTotal: percentage,\n      answer: percentage\n    })\n    this.applyOperation(\"X\", true);\n  }\n\n  percent() {\n    let percentage = (this.state.answer / 100)\n    let percentageChange = percentage * this.state.runningTotal\n    if (this.state.operation === \"\") {\n      this.percentageOf(percentage);\n    } else if (this.state.operation === \"X\" || this.state.operation === \"/\") {\n      this.applyPercentOperation(this.state.operation, this.state.runningTotal, percentage);\n    } else {\n      this.applyPercentOperation(this.state.operation, this.state.runningTotal, percentageChange);\n    }\n  }\n\n\n\n  calculateRunningTotal(operation, currentRunningTotal, newNumber) {\n    if (operation === \"+\") {\n      return currentRunningTotal + newNumber;\n    } else if (operation === \"-\") {\n      return currentRunningTotal - newNumber;\n    } else if (operation === \"X\") {\n      return currentRunningTotal * newNumber;\n    } else if (operation === \"/\") {\n      return currentRunningTotal / newNumber;\n    } else if (operation === \"\" || operation === \"=\") {\n      return newNumber;\n    }\n    throw new Error(\"invalid operation\");\n  }\n\n  memoryChange(operator) {\n    this.setState((state) => ({\n      memory: this.calculateRunningTotal(operator,\n        state.memory, parseFloat(state.answer))\n    }))\n  }\n\n  memoryClear() {\n    this.setState({\n      memory: 0\n    })\n  }\n\n  memoryRecall() {\n    this.setState((state) => ({\n      answer: state.memory,\n      memRecall: true\n    }))\n  }\n\n  clear() {\n    this.setState({\n      operation: \"\",\n      runningTotal: 0,\n      answer: \"\",\n      memRecall: false,\n      historyString: \"\"\n    })\n\n  }\n\n  delete() {\n    if (this.state.answer !== \"\") {\n      this.setState((state) => ({\n        answer: state.answer.substring(0, state.answer.length - 1)\n      }))\n    }\n  }\n\n\n  handleNumbers(value) {\n    this.setState((state) => {\n      if (state.operation === \"=\") {\n        return { operation: \"\", answer: value }\n      } else if (state.memRecall) {\n        return { answer: value, memRecall: false }\n      }\n      let answer = state.answer + value;\n      if (answer === \".\") {\n        return { answer: \"0.\" };\n      } else {\n        return { answer: state.answer + value }\n      }\n    })\n  }\n\n  handleOperators(value) {\n    if (value === \"+\" || value === \"-\" || value === \"/\" || value === \"X\") {\n      this.applyOperation(value);\n    } else if (value === \"%\") {\n      this.percent();\n    } else if (value === \"=\") {\n      this.equals();\n    } else if (value === \"C\") {\n      this.clear();\n    } else if (value === \"Del\") {\n      this.delete();\n    } else if (value === \"CE\") {\n      this.clearEntry();\n    } else if (value === \"M+\") {\n      this.memoryChange(\"+\");\n    } else if (value === \"M-\") {\n      this.memoryChange(\"-\");\n    } else if (value === \"MR\") {\n      this.memoryRecall();\n    } else if (value === \"MC\") {\n      this.memoryClear();\n    } else {\n      console.error(\"unsupported function\", value);\n    }\n  }\n\n  buttonClicked(value) {\n    const regEx = /^(\\d|\\.)$/\n    if (value.match(regEx)) {\n      this.handleNumbers(value);\n    } else {\n      this.handleOperators(value);\n    }\n  }\n\n  renderButtons() {\n    const elements = [];\n    const buttons = Array.from(this.buttons);\n    let count = 0;\n    while (buttons.length > 0) {\n      count++;\n      const rowButtons = buttons.splice(0, 4);\n      const cols = rowButtons.map((b) =>\n        <Col sm=\"3\" key={b} className=\"buttonSet\">\n          <Button onClick={() => this.buttonClicked(b)}>{b}</Button>\n        </Col>\n      );\n      elements.push(<Row key={count}>{cols}</Row>);\n    }\n\n    return (<div className=\"buttons\">{elements}</div>);\n  }\n\n  render() {\n    console.log(this.state.historyString)\n    return (\n      <Container>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">\n            Simple Calculator\n          </Navbar.Brand>\n        </Navbar>\n        <Row>\n          <Col className=\"answer\">\n            <input type=\"text\" value={this.state.answer} readOnly />\n            <div className=\"operator\">{this.state.operation}</div>\n          </Col>\n        </Row>\n        {this.renderButtons()}\n        <History ref={this.history} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}